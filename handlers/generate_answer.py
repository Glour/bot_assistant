import asyncio

from aiogram import Dispatcher
from aiogram.types import Message

from utils.engine import create_chat_completion


async def show_generation_status(wait_message: Message):
    frame_index = 0
    animation_frames = [
        '‚†Ä\n–†–µ–∂–∏–º –Ω–µ–ø–æ–Ω—è—Ç–∫–∏...ü§î  \n‚†Ä',
        '‚†Ä\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µüîé\n‚†Ä',
        '‚†Ä\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç... üí°   \n‚†Ä',
    ]
    while True:
        await asyncio.sleep(0.6)
        await wait_message.edit_text(animation_frames[frame_index])
        frame_index = (frame_index + 1) % len(animation_frames)


async def generate_answer(msg: Message):
    wait_message = await msg.answer("‚†Ä\n‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n‚†Ä")
    show_generation_task = asyncio.create_task(show_generation_status(wait_message))
    result = await create_chat_completion(msg)
    if result:
        await msg.answer(result)
    else:
        pass
        # await msg.answer('–°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.')
    show_generation_task.cancel()
    await wait_message.delete()


def register_answer_user(dp: Dispatcher):
    dp.register_message_handler(generate_answer, content_types=['text'], state="*")
